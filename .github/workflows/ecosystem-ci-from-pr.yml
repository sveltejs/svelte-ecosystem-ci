# integration tests for svelte ecosystem - run from pr comments
name: svelte-ecosystem-ci-from-pr

env:
  # 7 GiB by default on GitHub, setting to 6 GiB
  # https://docs.github.com/en/actions/using-github-hosted-runners/about-github-hosted-runners#supported-runners-and-hardware-resources
  NODE_OPTIONS: --max-old-space-size=6144
  # configure corepack to be strict but not download newer versions or change anything
  COREPACK_DEFAULT_TO_LATEST: 0
  COREPACK_ENABLE_AUTO_PIN: 0
  COREPACK_ENABLE_STRICT: 1
  # see https://turbo.build/repo/docs/telemetry#how-do-i-opt-out
  TURBO_TELEMETRY_DISABLED: 1
  DO_NOT_TRACK: 1
on:
  workflow_dispatch:
    inputs:
      prNumber:
        description: "PR number (e.g. 9887)"
        required: true
        type: string
      branchName:
        description: "svelte branch to use"
        required: true
        type: string
        default: "main"
      repo:
        description: "svelte repository to use"
        required: true
        type: string
        default: "sveltejs/svelte"
      commit:
        description: "svelte commit sha to use"
        type: string
      suite:
        description: "testsuite to run. runs all testsuits when `-`."
        required: false
        type: choice
        options:
          - "-"
          - eslint-plugin-svelte
          - language-tools
          - mdsvex
          - melt-ui
          - melt-ui-preprocessor
          - prettier-plugin-svelte
          - rollup-plugin-svelte
          - skeleton
          - svelte-eslint-parser
          - svelte-loader
          - svelte-preprocess
          - sveltekit
          - vite-plugin-svelte
jobs:
  init:
    runs-on: ubuntu-latest
    outputs:
      comment-id: ${{ steps.create-comment.outputs.result }}
    permissions: {}
    steps:
      - id: generate-token
        uses: actions/create-github-app-token@v2
        with:
          app-id: ${{ secrets.ECOSYSTEM_CI_GITHUB_APP_ID }}
          private-key: ${{ secrets.ECOSYSTEM_CI_GITHUB_APP_PRIVATE_KEY }}
          repositories: svelte
      - id: create-comment
        uses: actions/github-script@v7
        with:
          github-token: ${{ steps.generate-token.outputs.token }}
          result-encoding: string
          script: |
            const url = `${context.serverUrl}//${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId}`
            const urlLink = `[Open](${url})`

            const { data: comment } = await github.rest.issues.createComment({
              issue_number: context.payload.inputs.prNumber,
              owner: context.repo.owner,
              repo: 'svelte',
              body: `⏳ Triggered ecosystem CI: ${urlLink}`
            })
            return comment.id

  execute-selected-suite:
    timeout-minutes: 30
    runs-on: ubuntu-latest
    needs: init
    if: "inputs.suite != '-'"
    outputs:
      ref: ${{ steps.get-ref.outputs.ref }}
    permissions:
      contents: read # to clone the repo
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: ^22.14.0
      - run: corepack enable
      - run: pnpm --version
      - run: pnpm i --frozen-lockfile
      - run: >-
          pnpm tsx ecosystem-ci.ts
          --branch ${{ inputs.branchName }}
          --repo ${{ inputs.repo }}
          ${{ inputs.commit && format('--commit {0}', inputs.commit) }}
          ${{ inputs.suite }}
      - id: get-ref
        if: always()
        run: |
          ref=${{ inputs.commit || '$(git log -1 --pretty=format:%H)' }}
          echo "ref=$ref" >> $GITHUB_OUTPUT
        working-directory: ${{ inputs.commit && '.' || 'workspace/svelte' }}

  execute-all:
    timeout-minutes: 30
    runs-on: ubuntu-latest
    needs: init
    if: "inputs.suite == '-'"
    outputs:
      ref: ${{ steps.get-ref.outputs.ref }}
    permissions:
      contents: read # to clone the repo
    strategy:
      matrix:
        suite:
          - eslint-plugin-svelte
          - language-tools
          - mdsvex
          - melt-ui
          - melt-ui-preprocessor
          - prettier-plugin-svelte
          - rollup-plugin-svelte
          - skeleton
          - sv
          - svelte-eslint-parser
          - svelte-loader
          - svelte-preprocess
          - sveltekit
          - vite-plugin-svelte
      fail-fast: false
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: ^22.14.0
      - run: corepack enable
      - run: pnpm --version
      - run: pnpm i --frozen-lockfile
      - run: >-
          pnpm tsx ecosystem-ci.ts
          --branch ${{ inputs.branchName }}
          --repo ${{ inputs.repo }}
          ${{ inputs.commit && format('--commit {0}', inputs.commit) }}
          ${{ matrix.suite }}
      - id: get-ref
        if: always()
        run: |
          ref=${{ inputs.commit || '$(git log -1 --pretty=format:%H)' }}
          echo "ref=$ref" >> $GITHUB_OUTPUT
        working-directory: ${{ inputs.commit && '.' || 'workspace/svelte' }}

  update-comment:
    runs-on: ubuntu-latest
    needs: [init, execute-selected-suite, execute-all]
    if: always()
    permissions: {}
    steps:
      - id: generate-token
        uses: actions/create-github-app-token@v2
        with:
          app-id: ${{ secrets.ECOSYSTEM_CI_GITHUB_APP_ID }}
          private-key: ${{ secrets.ECOSYSTEM_CI_GITHUB_APP_PRIVATE_KEY }}
          repositories: |
            svelte
            svelte-ecosystem-ci
      - uses: actions/github-script@v7
        with:
          github-token: ${{ steps.generate-token.outputs.token }}
          script: |
            const mainRepoName = 'svelte'
            const ref = "${{ needs.execute-all.outputs.ref }}" || "${{ needs.execute-selected-suite.outputs.ref }}"
            const refLink = `[\`${ref.slice(0, 7)}\`](${context.serverUrl}/${context.repo.owner}/${mainRepoName}/pull/${context.payload.inputs.prNumber}/commits/${ref})`

            const { data: { jobs } } = await github.rest.actions.listJobsForWorkflowRun({
              owner: context.repo.owner,
              repo: context.repo.repo,
              run_id: context.runId,
              per_page: 100
            });

            const selectedSuite = context.payload.inputs.suite
            let results
            if (selectedSuite !== "-") {
              const { conclusion, html_url } = jobs.find(job => job.name === "execute-selected-suite")
              results = [{ suite: selectedSuite, conclusion, link: html_url }]
            } else {
              results = jobs
                .filter(job => job.name.startsWith('execute-all '))
                .map(job => {
                  const suite = job.name.replace(/^execute-all \(([^)]+)\)$/, "$1")
                  return { suite, conclusion: job.conclusion, link: job.html_url }
                })
            }

            const url = `${context.serverUrl}/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId}`
            const urlLink = `[Open](${url})`

            const conclusionEmoji = {
              success: ":white_check_mark:",
              failure: ":x:",
              cancelled: ":stop_button:"
            }

            // check for previous ecosystem-ci runs against the main branch

            // first, list workflow runs for ecosystem-ci.yml
            const { data: { workflow_runs } } = await github.rest.actions.listWorkflowRuns({
              owner: context.repo.owner,
              repo: context.repo.repo,
              workflow_id: 'ecosystem-ci.yml'
            });

            // for simplity, we only take the latest completed scheduled run
            // otherwise we would have to check the inputs for every maunally triggerred runs, which is an overkill
            const latestScheduledRun = workflow_runs.find(run => run.event === "schedule" && run.status === "completed")

            // get the jobs for the latest scheduled run
            const { data: { jobs: scheduledJobs } } = await github.rest.actions.listJobsForWorkflowRun({
              owner: context.repo.owner,
              repo: context.repo.repo,
              run_id: latestScheduledRun.id
            });
            const scheduledResults = scheduledJobs
              .filter(job => job.name.startsWith('test-ecosystem '))
              .map(job => {
                const suite = job.name.replace(/^test-ecosystem \(([^)]+)\)$/, "$1")
                return { suite, conclusion: job.conclusion, link: job.html_url }
              })

            const rows = []
            const successfulSuitesWithoutChanges = []
            results.forEach(current => {
              const latest = scheduledResults.find(s => s.suite === current.suite) || {} // in case a new suite is added after latest scheduled

              if (current.conclusion === "success" && latest.conclusion === "success") {
                successfulSuitesWithoutChanges.push(`[${current.suite}](${current.link})`)
              }
              else {
                const firstColumn = current.suite
                const secondColumn = `${conclusionEmoji[current.conclusion]} [${current.conclusion}](${current.link})`
                const thirdColumn = `${conclusionEmoji[latest.conclusion]} [${latest.conclusion}](${latest.link})`

                rows.push(`| ${firstColumn} | ${secondColumn} | ${thirdColumn} |`)
              }
            })

            let body = `
            📝 Ran ecosystem CI on ${refLink}: ${urlLink}

            `
            if (rows.length > 0) {
              body += `| suite | result | [latest scheduled](${latestScheduledRun.html_url}) |
            |-------|--------|----------------|
            ${rows.join("\n")}

            ${conclusionEmoji.success} ${successfulSuitesWithoutChanges.join(", ")}
            `
            } else {
              body += `${conclusionEmoji.success} ${successfulSuitesWithoutChanges.join(", ")}
            `
            }

            await github.rest.issues.createComment({
              issue_number: context.payload.inputs.prNumber,
              owner: context.repo.owner,
              repo: mainRepoName,
              body
            })

            await github.rest.issues.deleteComment({
              owner: context.repo.owner,
              repo: mainRepoName,
              comment_id: ${{ needs.init.outputs.comment-id }}
            })
